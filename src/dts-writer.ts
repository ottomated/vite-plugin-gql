import { writeFile } from 'node:fs/promises';
import { basename } from 'node:path';
import { format } from 'prettier';

// You can undo this if you want just makes more consistent code
export type GqlTypeInfo =
	| {
			variables: string | null;
			return_type: string;
	  }
	| {
			error: string;
	  };

export class DtsWriter {
	out_file: string;
	module_id: string;

	#file_map: Map<string, Map<string, GqlTypeInfo>> = new Map();

	constructor(module_id: string, out_file: string) {
		this.module_id = module_id;
		this.out_file = out_file;
	}

	update_file(
		id: string,
		types: Map<string, GqlTypeInfo>,
	): void {
		this.#file_map.set(id, types);

		clearTimeout(this.write_timeout);
		this.write_timeout = setTimeout(() => {
			this.write_timeout = undefined;
			this.#write();
		}, 100);
	}

	write_timeout: ReturnType<typeof setTimeout> | undefined;

	async #write() {
		let dts = `// ==== This file is auto-generated by @o7/vite-plugin-gql. Do not edit. ====
		declare module '${this.module_id}' {\n`;

		for (const [file, types] of this.#file_map) {
			dts += `// ${basename(file)}\n`;
			for (const [query, typescript] of types) {
				if ('error' in typescript) {
					dts += `/** @deprecated ${typescript.error} */
					export default function gql(
						query: ${JSON.stringify(query)},
						variables?: any
					): Promise<{__gql_error: ${JSON.stringify(typescript.error)}}>;\n`;
					continue;
				}

				const { variables, return_type } = typescript;
				dts += `export default function gql(
					query: ${JSON.stringify(query)},
					variables${variables === null ? '?: undefined' : `: ${variables}`}
				): Promise<(${return_type})>;\n`;
			}
		}
		dts += '}';

		const formatted =
			'/* eslint-disable */\n/* prettier-ignore */\n' +
			(await format(dts, {
				parser: 'typescript',
				trailingComma: 'all',
				useTabs: true,
				singleQuote: true,
			}));

		await writeFile(this.out_file, formatted);
	}
}
